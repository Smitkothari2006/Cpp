/*single_inheritance.cpp 
#include <iostream>
using namespace std;

class Animal {
public:
    void eat() {
        cout << "Animal eats food" << endl;
    }
};

class Dog : public Animal {
    // Inherits eat()
};

int main() {
    Dog d;
    d.eat();  // Output: Animal eats food
    return 0;
} */


/*multilevel_inheritance.cpp
#include <iostream>
using namespace std;

class Person {
public:
    void display() {
        cout << "Person details" << endl;
    }
};

class Employee : public Person {
    // Inherits display()
};

class Manager : public Employee {
    // Inherits display() through Employee
};

int main() {
    Manager m;
    m.display();  // Output: Person details
    return 0;*/
}

/*multiple_inheritance.cpp
#include <iostream>
using namespace std;

class Father {
public:
    void showFather() {
        cout << "I am Father" << endl;
    }
};

class Mother {
public:
    void showMother() {
        cout << "I am Mother" << endl;
    }
};

class Child : public Father, public Mother {
    // Inherits both showFather and showMother
};

int main() {
    Child c;
    c.showFather();
    c.showMother();
    return 0;
}*/

/*hierarchical_inheritance.cpp
#include <iostream>
using namespace std;

class Vehicle {
public:
    void drive() {
        cout << "Driving a vehicle" << endl;
    }
};

class Car : public Vehicle { };
class Bike : public Vehicle { };

int main() {
    Car car;
    Bike bike;
    car.drive();   // Output: Driving a vehicle
    bike.drive();  // Output: Driving a vehicle
    return 0;
}*/

/*hybrid_inheritance_device.cpp
#include <iostream>
using namespace std;

class Device {
public:
    void powerOn() {
        cout << "Device is powered on" << endl;
    }
};

// Virtual inheritance to avoid diamond problem
class Phone : virtual public Device {
public:
    void makeCall() {
        cout << "Making a phone call..." << endl;
    }
};

class Camera : virtual public Device {
public:
    void takePhoto() {
        cout << "Taking a photo..." << endl;
    }
};

class Smartphone : public Phone, public Camera {
    // Inherits Device via Phone and Camera
};

int main() {
    Smartphone s;
    s.powerOn();     // From Device
    s.makeCall();    // From Phone
    s.takePhoto();   // From Camera

    return 0;
}*/
